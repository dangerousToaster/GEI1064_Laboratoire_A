
/******************************************************************************
 * INCLUDES
******************************************************************************/
#include <stdio.h>
#include <stdbool.h>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <math.h>
#include "FIR_LMS.h"
using namespace std;



/* Main */
int main ()
{
	/* input files */
	ifstream file_MatlabInput;
	ifstream file_MatlabInputNoise;
	ifstream file_MatlabInputEstimate;

	/* input vectors */
	T_FIR_LMS_data MatlabInput[N];
	T_FIR_LMS_data MatlabInputNoise[N];
	T_FIR_LMS_data MatlabInputEstimate[N];

	/* filter's output and parameters */
	int FIR_N_Train = 300u;
	T_FIR_LMS_mu FIR_mu;
	T_FIR_LMS_data FIR_inputEstimate[N] = {0};



	/* Read input files generated by Matlab */
	file_MatlabInput.open("inp.txt");
	file_MatlabInputNoise.open("yn.txt");
	file_MatlabInputEstimate.open("inpest.txt");
	int i;
	for(i = 0; i < N; i++)
	{
		file_MatlabInput >> MatlabInput[i];
		file_MatlabInputEstimate >> MatlabInputEstimate[i];
		file_MatlabInputNoise >> MatlabInputNoise[i];
	}
	file_MatlabInput.close();
	file_MatlabInputNoise.close();
	file_MatlabInputEstimate.close();



	/* apply the filter on the input values from matlab */
	int n;
	FIR_mu = 0.25;
	bool isTraining = true;
	for (n = 0; n < N; n++)
	{
		if(n == (FIR_N_Train))
		{
			isTraining = false;
		}
		FIR_LMS(&FIR_inputEstimate[n], &MatlabInputNoise[n], FIR_mu, &MatlabInput[n], isTraining);
	}



	/* check for errors and print results */
	double accumulatedError = 0.0f;
	double error;
	int errorCounter = 0;
	for(i = 0; i < N; i++)
	{
		error = fabs((float)FIR_inputEstimate[i] - (float)MatlabInputEstimate[i]);
		accumulatedError += error;
		if(error > 0.01)
		{
			errorCounter++;
		}
		fprintf(stdout, "%d    %0.8f    %0.8f\n", i, (float)FIR_inputEstimate[i], (float)MatlabInputEstimate[i]);
	}



	/* check if test passed */
	if(errorCounter > 0)
	{
		fprintf(stdout, "*******************************************\n");
		fprintf(stdout, "FAIL: Output DOES NOT match the Matlab output\n");
		fprintf(stdout, "Number of errors: %d\n", errorCounter);
		fprintf(stdout, "*******************************************\n");
	}
	else
	{
		fprintf(stdout, "*******************************************\n");
		fprintf(stdout, "PASS: The output matches the Matlab output!\n");
		fprintf(stdout, "Number of errors: %d\n", errorCounter);
		fprintf(stdout, "*******************************************\n");
	}

	fprintf(stdout, "Accumulated |error|: %.8lf\n", accumulatedError);
	fprintf(stdout, "Average error:       %.8lf\n", accumulatedError/(double)N);

	return 0;
}
